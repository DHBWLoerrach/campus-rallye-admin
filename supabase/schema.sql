

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE SCHEMA IF NOT EXISTS "public";


ALTER SCHEMA "public" OWNER TO "pg_database_owner";


CREATE TYPE "public"."question_type" AS ENUM (
    'multiple_choice',
    'knowledge',
    'picture',
    'qr_code',
    'upload'
);


ALTER TYPE "public"."question_type" OWNER TO "postgres";


CREATE TYPE "public"."rallye_status" AS ENUM (
    'preparing',
    'running',
    'post_processing',
    'ended',
    'inactive'
);


ALTER TYPE "public"."rallye_status" OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."JOIN_question_answer"("rallye_id" bigint) RETURNS "record"
    LANGUAGE "sql"
    AS $$SELECT *
FROM answers A, join_rallye_questions RQ
WHERE RQ.rallye_id = rallye_id
AND RQ.question_id = A.question_id$$;


ALTER FUNCTION "public"."JOIN_question_answer"("rallye_id" bigint) OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."get_question_count"("team_id_param" integer, "rallye_id_param" integer) RETURNS TABLE("answeredquestions" bigint, "totalquestions" bigint)
    LANGUAGE "sql" SECURITY DEFINER
    AS $$
  SELECT
    (SELECT COUNT(*) FROM team_questions WHERE team_id = team_id_param),
    (SELECT COUNT(*) FROM join_rallye_questions WHERE rallye_id = rallye_id_param);
$$;


ALTER FUNCTION "public"."get_question_count"("team_id_param" integer, "rallye_id_param" integer) OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."get_voting_content"("rallye_id_param" bigint, "own_team_id_param" bigint) RETURNS TABLE("tq_id" bigint, "tq_team_id" bigint, "tq_question_id" bigint, "tq_points" bigint, "rt_id" bigint, "rt_rallye_id" bigint, "rt_team_name" "text", "tq_team_answer" "text", "question_content" "text", "question_type" "public"."question_type")
    LANGUAGE "plpgsql"
    AS $$
BEGIN
  RETURN QUERY
    SELECT tq.id, tq.team_id, tq.question_id, tq.points,
           rt.id, rt.rallye_id, rt.name, tq.team_answer,
           q.content, q.type
    FROM team_questions AS tq
    JOIN rallye_team AS rt ON tq.team_id = rt.id
    JOIN questions AS q ON tq.question_id = q.id
    WHERE tq.question_id IN (
          SELECT v.question_id
          FROM voting AS v
          WHERE v.rallye_id = rallye_id_param
    )
    AND rt.rallye_id = rallye_id_param
    AND rt.id != own_team_id_param;
END;
$$;


ALTER FUNCTION "public"."get_voting_content"("rallye_id_param" bigint, "own_team_id_param" bigint) OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."team_questions" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "question_id" bigint NOT NULL,
    "team_id" bigint NOT NULL,
    "correct" boolean NOT NULL,
    "points" bigint NOT NULL,
    "team_answer" "text"
);


ALTER TABLE "public"."team_questions" OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."increment_team_question_points"("target_answer_id" integer) RETURNS "public"."team_questions"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
DECLARE
  updated_row team_questions%ROWTYPE;
BEGIN
  UPDATE team_questions
  SET points = points + 1
  WHERE id = target_answer_id
  RETURNING * INTO updated_row;
  
  RETURN updated_row;
END;
$$;


ALTER FUNCTION "public"."increment_team_question_points"("target_answer_id" integer) OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."answers" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "text" "text",
    "correct" boolean DEFAULT true NOT NULL,
    "question_id" bigint
);


ALTER TABLE "public"."answers" OWNER TO "postgres";


ALTER TABLE "public"."answers" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."answers_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."join_rallye_questions" (
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "rallye_id" bigint NOT NULL,
    "question_id" bigint NOT NULL
);


ALTER TABLE "public"."join_rallye_questions" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."profiles" (
    "user_id" "uuid" NOT NULL,
    "admin" boolean DEFAULT false,
    "created_at" timestamp with time zone DEFAULT "now"()
);


ALTER TABLE "public"."profiles" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."questions" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "content" "text" NOT NULL,
    "type" "public"."question_type" NOT NULL,
    "points" bigint,
    "hint" "text",
    "category" "text",
    "bucket_path" "text"
);


ALTER TABLE "public"."questions" OWNER TO "postgres";


ALTER TABLE "public"."questions" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."questions_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."rallye" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "studiengang" "text" NOT NULL,
    "status" "public"."rallye_status" DEFAULT 'preparing'::"public"."rallye_status" NOT NULL,
    "name" "text" NOT NULL,
    "end_time" timestamp with time zone NOT NULL,
    "password" "text",
    "tour_mode" boolean DEFAULT false NOT NULL
);


ALTER TABLE "public"."rallye" OWNER TO "postgres";


ALTER TABLE "public"."rallye" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."rallye_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."rallye_team" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text" NOT NULL,
    "rallye_id" bigint,
    "time_played" timestamp with time zone
);


ALTER TABLE "public"."rallye_team" OWNER TO "postgres";


ALTER TABLE "public"."rallye_team" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."rallye_team_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE "public"."team_questions" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."team_questions_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."voting" (
    "rallye_id" bigint NOT NULL,
    "question_id" bigint NOT NULL
);


ALTER TABLE "public"."voting" OWNER TO "postgres";


ALTER TABLE ONLY "public"."join_rallye_questions"
    ADD CONSTRAINT "JOIN_rallye_questions_pkey" PRIMARY KEY ("rallye_id", "question_id");



ALTER TABLE ONLY "public"."answers"
    ADD CONSTRAINT "answers_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_pkey" PRIMARY KEY ("user_id");



ALTER TABLE ONLY "public"."questions"
    ADD CONSTRAINT "questions_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."rallye_team"
    ADD CONSTRAINT "rallyeTeam_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."rallye"
    ADD CONSTRAINT "rallye_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."team_questions"
    ADD CONSTRAINT "teamQuestions_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."voting"
    ADD CONSTRAINT "voting_pkey" PRIMARY KEY ("rallye_id", "question_id");



ALTER TABLE ONLY "public"."join_rallye_questions"
    ADD CONSTRAINT "JOIN_rallye_questions_question_id_fkey" FOREIGN KEY ("question_id") REFERENCES "public"."questions"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."join_rallye_questions"
    ADD CONSTRAINT "JOIN_rallye_questions_rallye_id_fkey" FOREIGN KEY ("rallye_id") REFERENCES "public"."rallye"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."answers"
    ADD CONSTRAINT "answers_question_id_fkey" FOREIGN KEY ("question_id") REFERENCES "public"."questions"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."rallye_team"
    ADD CONSTRAINT "rallyeTeam_rallye_id_fkey" FOREIGN KEY ("rallye_id") REFERENCES "public"."rallye"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."team_questions"
    ADD CONSTRAINT "teamQuestions_question_id_fkey" FOREIGN KEY ("question_id") REFERENCES "public"."questions"("id");



ALTER TABLE ONLY "public"."team_questions"
    ADD CONSTRAINT "teamQuestions_team_id_fkey" FOREIGN KEY ("team_id") REFERENCES "public"."rallye_team"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."voting"
    ADD CONSTRAINT "voting_question_id_fkey" FOREIGN KEY ("question_id") REFERENCES "public"."questions"("id");



ALTER TABLE ONLY "public"."voting"
    ADD CONSTRAINT "voting_rallye_id_fkey" FOREIGN KEY ("rallye_id") REFERENCES "public"."rallye"("id");



CREATE POLICY "Enable insert access for all users" ON "public"."rallye_team" FOR INSERT WITH CHECK (true);



CREATE POLICY "Enable read access for all users" ON "public"."answers" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."questions" FOR SELECT USING (true);



CREATE POLICY "Enable update access for all users" ON "public"."rallye_team" FOR UPDATE USING (true);



CREATE POLICY "Enable write for authenticated users only" ON "public"."answers" TO "authenticated" USING (true) WITH CHECK (true);



CREATE POLICY "Enable write for authenticated users only" ON "public"."join_rallye_questions" TO "authenticated" USING (true) WITH CHECK (true);



CREATE POLICY "Enable write for authenticated users only" ON "public"."profiles" TO "authenticated" USING (true) WITH CHECK (true);



CREATE POLICY "Enable write for authenticated users only" ON "public"."questions" TO "authenticated" USING (true) WITH CHECK (true);



CREATE POLICY "Enable write for authenticated users only" ON "public"."rallye" TO "authenticated" USING (true) WITH CHECK (true);



CREATE POLICY "Enable write for authenticated users only" ON "public"."voting" TO "authenticated" USING (true) WITH CHECK (true);



CREATE POLICY "Enabled read access for all users" ON "public"."join_rallye_questions" FOR SELECT USING (true);



CREATE POLICY "Enabled read access for all users" ON "public"."rallye" FOR SELECT USING (true);



CREATE POLICY "Enabled read access for all users" ON "public"."rallye_team" FOR SELECT USING (true);



CREATE POLICY "Enabled read access for all users" ON "public"."team_questions" FOR SELECT USING (true);



CREATE POLICY "Enabled read access for all users" ON "public"."voting" FOR SELECT USING (true);



CREATE POLICY "Enabled write access for all users" ON "public"."rallye_team" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enabled write access for all users" ON "public"."team_questions" FOR INSERT WITH CHECK (true);



ALTER TABLE "public"."answers" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."join_rallye_questions" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."questions" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."rallye" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."rallye_team" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."team_questions" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."voting" ENABLE ROW LEVEL SECURITY;


REVOKE USAGE ON SCHEMA "public" FROM PUBLIC;
GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";



GRANT ALL ON FUNCTION "public"."JOIN_question_answer"("rallye_id" bigint) TO "anon";
GRANT ALL ON FUNCTION "public"."JOIN_question_answer"("rallye_id" bigint) TO "authenticated";
GRANT ALL ON FUNCTION "public"."JOIN_question_answer"("rallye_id" bigint) TO "service_role";



GRANT ALL ON FUNCTION "public"."get_question_count"("team_id_param" integer, "rallye_id_param" integer) TO "anon";
GRANT ALL ON FUNCTION "public"."get_question_count"("team_id_param" integer, "rallye_id_param" integer) TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_question_count"("team_id_param" integer, "rallye_id_param" integer) TO "service_role";



GRANT ALL ON FUNCTION "public"."get_voting_content"("rallye_id_param" bigint, "own_team_id_param" bigint) TO "anon";
GRANT ALL ON FUNCTION "public"."get_voting_content"("rallye_id_param" bigint, "own_team_id_param" bigint) TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_voting_content"("rallye_id_param" bigint, "own_team_id_param" bigint) TO "service_role";



GRANT ALL ON TABLE "public"."team_questions" TO "anon";
GRANT ALL ON TABLE "public"."team_questions" TO "authenticated";
GRANT ALL ON TABLE "public"."team_questions" TO "service_role";



GRANT ALL ON FUNCTION "public"."increment_team_question_points"("target_answer_id" integer) TO "anon";
GRANT ALL ON FUNCTION "public"."increment_team_question_points"("target_answer_id" integer) TO "authenticated";
GRANT ALL ON FUNCTION "public"."increment_team_question_points"("target_answer_id" integer) TO "service_role";



GRANT ALL ON TABLE "public"."answers" TO "anon";
GRANT ALL ON TABLE "public"."answers" TO "authenticated";
GRANT ALL ON TABLE "public"."answers" TO "service_role";



GRANT ALL ON SEQUENCE "public"."answers_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."answers_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."answers_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."join_rallye_questions" TO "anon";
GRANT ALL ON TABLE "public"."join_rallye_questions" TO "authenticated";
GRANT ALL ON TABLE "public"."join_rallye_questions" TO "service_role";



GRANT ALL ON TABLE "public"."profiles" TO "anon";
GRANT ALL ON TABLE "public"."profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."profiles" TO "service_role";



GRANT ALL ON TABLE "public"."questions" TO "anon";
GRANT ALL ON TABLE "public"."questions" TO "authenticated";
GRANT ALL ON TABLE "public"."questions" TO "service_role";



GRANT ALL ON SEQUENCE "public"."questions_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."questions_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."questions_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."rallye" TO "anon";
GRANT ALL ON TABLE "public"."rallye" TO "authenticated";
GRANT ALL ON TABLE "public"."rallye" TO "service_role";



GRANT ALL ON SEQUENCE "public"."rallye_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."rallye_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."rallye_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."rallye_team" TO "anon";
GRANT ALL ON TABLE "public"."rallye_team" TO "authenticated";
GRANT ALL ON TABLE "public"."rallye_team" TO "service_role";



GRANT ALL ON SEQUENCE "public"."rallye_team_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."rallye_team_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."rallye_team_id_seq" TO "service_role";



GRANT ALL ON SEQUENCE "public"."team_questions_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."team_questions_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."team_questions_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."voting" TO "anon";
GRANT ALL ON TABLE "public"."voting" TO "authenticated";
GRANT ALL ON TABLE "public"."voting" TO "service_role";



ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






RESET ALL;
